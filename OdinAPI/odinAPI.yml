openapi: 3.0.0
info:
  description: |
    This is the documentation for the API calls within the OdinAPI. It also serves as a test bed to perform these API calls directly.
  version: 1.0.0
  title: OdinAPI
servers:
  - url: "http://localhost:5000"
tags:
  - name: Users
    description: Everything about dashboard users

paths:
  /users/:
    get:
      summary: "Get all users"
      description: "Endpoint to get all the dashboard users within the system."
      operationId: listUsers
      tags:
        - Users
      responses:
        "200":
          description: "Success!"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Add new user"
      description: "Endpoint to create a new user in the system."
      operationId: addUsers
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        "200":
          description: "Success!"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{duid}:
    get:
      summary: "Get user by ID"
      description: "Get dashboard user with the given Id"
      tags:
        - Users
      parameters:
        - name: duid
          in: path
          description: The id for the user
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    patch:
      summary: "Update user information"
      description: "Update the information for the user with the given Id"
      tags:
        - Users
      parameters:
        - name: duid
          in: path
          description: The id for the user
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInfoChange"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/username/:
    post:
      summary: "Get by username"
      description: "Get the record of the user with the given username."
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsernameChange"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/email/:
    post:
      summary: "Get by email"
      description: "Get the record of the user with the given email."
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Email"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{duid}/reset:
    patch:
      summary: "Password Reset"
      description: " Reset the password for the user with the given Id"
      tags:
        - Users
      parameters:
        - name: duid
          in: path
          description: The id for the user
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordReset"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/activate:
    patch:
      summary: "Activate a user acount."
      description: " Reset the password for the user with the 
      given username and activate their account."
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountActivation"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{duid}/toggleActive:
    patch:
      summary: "Activate/Deactivate a user"
      description: "Toggles the active state for a user with the given Id"
      tags:
        - Users
      parameters:
        - name: duid
          in: path
          description: The id for the user
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{duid}/remove:
    patch:
      summary: "Remove a user from the system"
      description: "Removes a user with the given Id from the system by invalidating its record in the database."
      tags:
        - Users
      parameters:
        - name: duid
          in: path
          description: The id for the user
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{duid}/permissions:
    get:
      summary: "Get user permissions"
      description: "Get permissions for the user with the given duid."
      operationId: getPermissions
      tags:
        - Users
      parameters:
        - name: duid
          in: path
          required: true
          description: Id of the user whose permissions are being fetched.
          schema:
            type: string
      responses:
        "200":
          description: "Success!"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPermissions"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: "Set user permissions"
      description: "Set permissions for the user with the given duid."
      operationId: setPermissions
      tags:
        - Users
      parameters:
        - name: duid
          in: path
          required: true
          description: Id of the user whose permissions are being fetched.
          schema:
            type: string
      responses:
        "201":
          description: "Success!"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/:
    post:
      summary: "Authenticate a user"
      description: "Verify user credentials and generate auth token."
      operationId: setAuth
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAuth"
      responses:
        "201":
          description: "Success!"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserAuthResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    UserAuth:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    UserAuthResponse:
      type: object
      properties:
        username:
          type: string
        token:
          type: string
    UserPermissions:
      type: object
      properties:
        permission_id:
          type: integer
        is_invalid:
          type: boolean
    UsernameChange:
      type: object
      properties:
        username:
          type: string
    UserInfoChange:
      type: object
      properties:
        username:
          type: string
        full_name:
          type: string
        email:
          type: string
        is_active:
          type: string
      xml:
        name: User
    Email:
      type: object
      properties:
        email:
          type: string
    PasswordReset:
      type: object
      properties:
        password:
          type: string
    AccountActivation:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        new_password:
          type: string
    Users:
      type: object
      properties:
        duid:
          type: integer
          format: int64
        username:
          type: string
        full_name:
          type: string
        email:
          type: string
        password:
          type: string
        is_active:
          type: boolean
          enum:
            - TRUE
            - FALSE
        is_invalid:
          type: boolean
          enum:
            - TRUE
            - FALSE
      xml:
        name: User
    NewUser:
      type: object
      properties:
        username:
          type: string
        full_name:
          type: string
        email:
          type: string
        password:
          type: string
      xml:
        name: User
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
